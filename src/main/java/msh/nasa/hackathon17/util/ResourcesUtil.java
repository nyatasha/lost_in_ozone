package msh.nasa.hackathon17.util;

import android.annotation.SuppressLint;
import android.content.Context;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.PorterDuff;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.support.annotation.ColorRes;
import android.support.annotation.DrawableRes;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.annotation.StringRes;

import java.util.IllegalFormatException;
import java.util.Locale;

/**
 * Created by mohsen_shahini on 5/3/17.
 */

public final class ResourcesUtil {

    private ResourcesUtil() {
    }

    /**
     * Convert dp to px
     *
     * @param dp size in dp
     * @return size in px
     */
    public static int dpToPx(final int dp) {
        return (int) (dp * Resources.getSystem().getDisplayMetrics().density);
    }

    /**
     * @see #getString(android.content.res.Resources, int, Object...)
     */
    @NonNull
    public static String getString(@NonNull final Context context, @StringRes final int id, final Object... formatArgs) {
        return getString(context.getResources(), id, formatArgs);
    }

    /**
     * Return the string value associated with a particular resource ID,
     * substituting the format arguments as defined in {@link java.util.Formatter}
     * and {@link java.lang.String#format}. It will be stripped of any styled text
     * information.
     *
     * @param id         The desired resource identifier, as generated by the aapt
     *                   tool. This integer encodes the package, type, and resource
     *                   entry. The value 0 is an invalid identifier.
     * @param formatArgs The format arguments that will be used for substitution.
     * @return String The string data associated with the resource,
     * stripped of styled text information.
     * @throws Resources.NotFoundException Throws NotFoundException if the given ID does not exist.
     */
    @NonNull
    public static String getString(@NonNull final Resources resources, @StringRes final int id, final Object... formatArgs) {
        try {
            return resources.getString(id, formatArgs);
        } catch (final IllegalFormatException e) {
            final String message = "Failed to format the string resource! The user locale is:"
                    + Locale.getDefault().toString();
            throw new IllegalArgumentException(message, e);
        }
    }

    @SuppressLint("NewApi")
    @SuppressWarnings("deprecation")
    @Nullable
    public static Drawable getDrawable(@NonNull final Context context, @DrawableRes final int drawableRes) {
        return AndroidDevice.hasLollipopApi()
                ? context.getResources().getDrawable(drawableRes, context.getTheme())
                : context.getResources().getDrawable(drawableRes);
    }

    @SuppressLint("NewApi")
    @SuppressWarnings("deprecation")
    @Nullable
    public static Drawable getDrawableTint(@NonNull final Context context, @DrawableRes final int drawableRes, @ColorRes final int colorRes) {
        final Drawable dr = getDrawable(context, drawableRes);
        if (dr != null) {
            if (AndroidDevice.hasLollipopApi()) {
                dr.setTint(getColor(context, colorRes));
            } else {
                dr.mutate().setColorFilter(getColor(context, colorRes), PorterDuff.Mode.SRC_IN);
            }
        }
        return dr;
    }

    @SuppressLint("NewApi")
    @SuppressWarnings("deprecation")
    public static int getColor(@NonNull final Context context, @ColorRes final int colorRes) {
        return AndroidDevice.hasMarshmallowApi()
                ? context.getResources().getColor(colorRes, context.getTheme())
                : context.getResources().getColor(colorRes);
    }

    @NonNull
    public static Resources getLocalizedResources(final Context context, final Locale desiredLocale) {
        Configuration conf = context.getResources().getConfiguration();
        conf = new Configuration(conf);
        conf.setLocale(desiredLocale);
        final Context localizedContext = context.createConfigurationContext(conf);
        return localizedContext.getResources();
    }

    public static Bitmap drawableToBitmap(final Drawable drawable) {
        final Bitmap bitmap;

        if (drawable instanceof BitmapDrawable) {
            BitmapDrawable bitmapDrawable = (BitmapDrawable) drawable;
            if (bitmapDrawable.getBitmap() != null) {
                return bitmapDrawable.getBitmap();
            }
        }

        if (drawable.getIntrinsicWidth() <= 0 || drawable.getIntrinsicHeight() <= 0) {
            bitmap = Bitmap.createBitmap(1, 1, Bitmap.Config.ARGB_8888); // Single color bitmap will be created of 1x1 pixel
        } else {
            bitmap = Bitmap.createBitmap(drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight(), Bitmap.Config.ARGB_8888);
        }

        Canvas canvas = new Canvas(bitmap);
        drawable.setBounds(0, 0, canvas.getWidth(), canvas.getHeight());
        drawable.draw(canvas);

        return bitmap;
    }
}
